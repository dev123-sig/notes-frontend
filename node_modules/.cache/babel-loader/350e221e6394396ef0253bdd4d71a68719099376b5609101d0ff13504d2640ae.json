{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\notes\\\\client\\\\src\\\\components\\\\FormattedText.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormattedText = ({\n  text,\n  className = '',\n  maxLines = null\n}) => {\n  const formatText = text => {\n    if (!text) return '';\n    let formatted = text;\n\n    // Clean up broken formatting markers first\n    formatted = formatted.replace(/\\*\\*\\s*\\n\\s*\\*\\*/g, '**\\n**'); // Fix broken bold across lines\n    formatted = formatted.replace(/\\*\\s*\\n\\s*\\*/g, '*\\n*'); // Fix broken italic across lines\n    formatted = formatted.replace(/\\*\\*\\s*\\*\\*/g, ''); // Remove empty bold markers\n    formatted = formatted.replace(/(?<!\\*)\\*\\s*\\*(?!\\*)/g, ''); // Remove empty italic markers\n\n    // Convert **bold** to <strong> - handle multiline bold\n    formatted = formatted.replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '<strong>$1</strong>');\n\n    // Convert *italic* to <em> - handle multiline italic\n    formatted = formatted.replace(/(?<!\\*)\\*([^*\\n]*(?:\\n[^*\\n]*)*)\\*(?!\\*)/g, '<em>$1</em>');\n\n    // Convert <u>underline</u> (already in HTML format)\n    // No need to convert as it's already HTML\n\n    // Convert bullet points to proper list items\n    formatted = formatted.replace(/^• (.*)$/gm, '<li>$1</li>');\n\n    // Wrap consecutive list items in <ul>\n    formatted = formatted.replace(/(<li>.*<\\/li>\\s*)+/gs, match => {\n      return '<ul class=\"list-disc list-inside my-2 space-y-1\">' + match + '</ul>';\n    });\n\n    // Convert line breaks to <br> tags (but not inside lists)\n    formatted = formatted.replace(/\\n(?![^<]*<\\/li>)/g, '<br />');\n    return formatted;\n  };\n  const formattedContent = formatText(text);\n  const baseClasses = `prose prose-sm max-w-none ${className}`;\n  const lineClampClass = maxLines ? `line-clamp-${maxLines}` : '';\n  const finalClasses = `${baseClasses} ${lineClampClass}`.trim();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: finalClasses,\n    dangerouslySetInnerHTML: {\n      __html: formattedContent\n    },\n    style: {\n      lineHeight: '1.6',\n      // Custom styles for better formatting\n      wordBreak: 'break-word'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_c = FormattedText;\nexport default FormattedText;\nvar _c;\n$RefreshReg$(_c, \"FormattedText\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","FormattedText","text","className","maxLines","formatText","formatted","replace","match","formattedContent","baseClasses","lineClampClass","finalClasses","trim","dangerouslySetInnerHTML","__html","style","lineHeight","wordBreak","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Projects/notes/client/src/components/FormattedText.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst FormattedText = ({ text, className = '', maxLines = null }) => {\r\n  const formatText = (text) => {\r\n    if (!text) return '';\r\n    \r\n    let formatted = text;\r\n    \r\n    // Clean up broken formatting markers first\r\n    formatted = formatted.replace(/\\*\\*\\s*\\n\\s*\\*\\*/g, '**\\n**');  // Fix broken bold across lines\r\n    formatted = formatted.replace(/\\*\\s*\\n\\s*\\*/g, '*\\n*');        // Fix broken italic across lines\r\n    formatted = formatted.replace(/\\*\\*\\s*\\*\\*/g, '');             // Remove empty bold markers\r\n    formatted = formatted.replace(/(?<!\\*)\\*\\s*\\*(?!\\*)/g, '');    // Remove empty italic markers\r\n    \r\n    // Convert **bold** to <strong> - handle multiline bold\r\n    formatted = formatted.replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '<strong>$1</strong>');\r\n    \r\n    // Convert *italic* to <em> - handle multiline italic\r\n    formatted = formatted.replace(/(?<!\\*)\\*([^*\\n]*(?:\\n[^*\\n]*)*)\\*(?!\\*)/g, '<em>$1</em>');\r\n    \r\n    // Convert <u>underline</u> (already in HTML format)\r\n    // No need to convert as it's already HTML\r\n    \r\n    // Convert bullet points to proper list items\r\n    formatted = formatted.replace(/^• (.*)$/gm, '<li>$1</li>');\r\n    \r\n    // Wrap consecutive list items in <ul>\r\n    formatted = formatted.replace(/(<li>.*<\\/li>\\s*)+/gs, (match) => {\r\n      return '<ul class=\"list-disc list-inside my-2 space-y-1\">' + match + '</ul>';\r\n    });\r\n    \r\n    // Convert line breaks to <br> tags (but not inside lists)\r\n    formatted = formatted.replace(/\\n(?![^<]*<\\/li>)/g, '<br />');\r\n    \r\n    return formatted;\r\n  };\r\n\r\n  const formattedContent = formatText(text);\r\n  \r\n  const baseClasses = `prose prose-sm max-w-none ${className}`;\r\n  const lineClampClass = maxLines ? `line-clamp-${maxLines}` : '';\r\n  const finalClasses = `${baseClasses} ${lineClampClass}`.trim();\r\n\r\n  return (\r\n    <div \r\n      className={finalClasses}\r\n      dangerouslySetInnerHTML={{ __html: formattedContent }}\r\n      style={{\r\n        lineHeight: '1.6',\r\n        // Custom styles for better formatting\r\n        wordBreak: 'break-word'\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormattedText;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAC;EAAEC,IAAI;EAAEC,SAAS,GAAG,EAAE;EAAEC,QAAQ,GAAG;AAAK,CAAC,KAAK;EACnE,MAAMC,UAAU,GAAIH,IAAI,IAAK;IAC3B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;IAEpB,IAAII,SAAS,GAAGJ,IAAI;;IAEpB;IACAI,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC,CAAE;IAC/DD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAQ;IAC/DD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAa;IAC/DD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC,CAAI;;IAE/D;IACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,qBAAqB,EAAE,qBAAqB,CAAC;;IAE3E;IACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,2CAA2C,EAAE,aAAa,CAAC;;IAEzF;IACA;;IAEA;IACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,YAAY,EAAE,aAAa,CAAC;;IAE1D;IACAD,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,sBAAsB,EAAGC,KAAK,IAAK;MAC/D,OAAO,mDAAmD,GAAGA,KAAK,GAAG,OAAO;IAC9E,CAAC,CAAC;;IAEF;IACAF,SAAS,GAAGA,SAAS,CAACC,OAAO,CAAC,oBAAoB,EAAE,QAAQ,CAAC;IAE7D,OAAOD,SAAS;EAClB,CAAC;EAED,MAAMG,gBAAgB,GAAGJ,UAAU,CAACH,IAAI,CAAC;EAEzC,MAAMQ,WAAW,GAAG,6BAA6BP,SAAS,EAAE;EAC5D,MAAMQ,cAAc,GAAGP,QAAQ,GAAG,cAAcA,QAAQ,EAAE,GAAG,EAAE;EAC/D,MAAMQ,YAAY,GAAG,GAAGF,WAAW,IAAIC,cAAc,EAAE,CAACE,IAAI,CAAC,CAAC;EAE9D,oBACEb,OAAA;IACEG,SAAS,EAAES,YAAa;IACxBE,uBAAuB,EAAE;MAAEC,MAAM,EAAEN;IAAiB,CAAE;IACtDO,KAAK,EAAE;MACLC,UAAU,EAAE,KAAK;MACjB;MACAC,SAAS,EAAE;IACb;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACC,EAAA,GApDItB,aAAa;AAsDnB,eAAeA,aAAa;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}