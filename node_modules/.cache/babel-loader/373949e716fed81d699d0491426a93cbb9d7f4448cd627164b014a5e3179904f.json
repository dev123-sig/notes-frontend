{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\notes\\\\client\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nconst initialState = {\n  notifications: []\n};\nconst notificationReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_NOTIFICATION':\n      return {\n        ...state,\n        notifications: [...state.notifications, action.payload]\n      };\n    case 'REMOVE_NOTIFICATION':\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n    case 'CLEAR_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: []\n      };\n    default:\n      return state;\n  }\n};\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\n  const addNotification = (message, type = 'info', duration = 5000) => {\n    const id = Date.now() + Math.random();\n    const notification = {\n      id,\n      message,\n      type\n    };\n    dispatch({\n      type: 'ADD_NOTIFICATION',\n      payload: notification\n    });\n    if (duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, duration);\n    }\n    return id;\n  };\n  const removeNotification = id => {\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      payload: id\n    });\n  };\n  const clearNotifications = () => {\n    dispatch({\n      type: 'CLEAR_NOTIFICATIONS'\n    });\n  };\n  const showSuccess = (message, duration) => addNotification(message, 'success', duration);\n  const showError = (message, duration) => addNotification(message, 'error', duration);\n  const showInfo = (message, duration) => addNotification(message, 'info', duration);\n  const showWarning = (message, duration) => addNotification(message, 'warning', duration);\n  const value = {\n    notifications: state.notifications,\n    addNotification,\n    removeNotification,\n    clearNotifications,\n    showSuccess,\n    showError,\n    showInfo,\n    showWarning\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = NotificationProvider;\nexport const useNotification = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","NotificationContext","initialState","notifications","notificationReducer","state","action","type","payload","filter","n","id","NotificationProvider","children","_s","dispatch","addNotification","message","duration","Date","now","Math","random","notification","setTimeout","removeNotification","clearNotifications","showSuccess","showError","showInfo","showWarning","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotification","_s2","context","Error","$RefreshReg$"],"sources":["D:/Projects/notes/client/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nconst initialState = {\r\n  notifications: []\r\n};\r\n\r\nconst notificationReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: [...state.notifications, action.payload]\r\n      };\r\n    case 'REMOVE_NOTIFICATION':\r\n      return {\r\n        ...state,\r\n        notifications: state.notifications.filter(n => n.id !== action.payload)\r\n      };\r\n    case 'CLEAR_NOTIFICATIONS':\r\n      return {\r\n        ...state,\r\n        notifications: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(notificationReducer, initialState);\r\n\r\n  const addNotification = (message, type = 'info', duration = 5000) => {\r\n    const id = Date.now() + Math.random();\r\n    const notification = { id, message, type };\r\n    \r\n    dispatch({ type: 'ADD_NOTIFICATION', payload: notification });\r\n    \r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        removeNotification(id);\r\n      }, duration);\r\n    }\r\n    \r\n    return id;\r\n  };\r\n\r\n  const removeNotification = (id) => {\r\n    dispatch({ type: 'REMOVE_NOTIFICATION', payload: id });\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    dispatch({ type: 'CLEAR_NOTIFICATIONS' });\r\n  };\r\n\r\n  const showSuccess = (message, duration) => addNotification(message, 'success', duration);\r\n  const showError = (message, duration) => addNotification(message, 'error', duration);\r\n  const showInfo = (message, duration) => addNotification(message, 'info', duration);\r\n  const showWarning = (message, duration) => addNotification(message, 'warning', duration);\r\n\r\n  const value = {\r\n    notifications: state.notifications,\r\n    addNotification,\r\n    removeNotification,\r\n    clearNotifications,\r\n    showSuccess,\r\n    showError,\r\n    showInfo,\r\n    showWarning\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotification must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}